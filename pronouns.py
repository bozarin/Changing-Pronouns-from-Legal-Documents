# -*- coding: utf-8 -*-
"""pronouns.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/gist/bozarin/a351b663cb7add8ab7749a75f5a84616/pronouns.ipynb

# Changing Pronouns from Legal Documents
First we import the packages we need:

- BeautifulSoup: This is used to extract information from webpages
- Requests: However, before we can extract information, we need to get the webpage. Requests is used for that
- NLTK: This is used for al NLP related tasks like Parts of Speech Tagging.
"""





from bs4 import BeautifulSoup
import requests
import nltk
nltk.download('punkt')
nltk.download('averaged_perceptron_tagger')

"""# Step 1: Get Webpage and Scrape it

First we will request the webpage we want to edit using the `requests` library

Then we will use `beautifulsoup` to parse the resulting `html` and extract all the texts in the `<p>` tags.
"""

html=requests.get('https://soham96.github.io/2021/03/08/settlement-agreement/')

soup = BeautifulSoup(html.content, 'html.parser')

texts=[]
for para in soup.find_all('p'):
    print(para.text)
    texts.append(para.text)

"""# Step 2: Creating Dictionaries of Replacements

Creating such dictionaries might seem like we are hardcoding everything, but instead, it helps us to be more granular with how we want to replace pronouns. Additionally, it helps us adjust how pronouns are replaced based on the person's preferences.
"""

replacement_he_she={'he':'she', 'she':'he', 'his':'her', 'her':'his', \
                    'him':'her', 'herself':'himself', \
                    'himself':'herself', 'ms':'mr', 'mr':'ms'}
replacement_they={'he':'they', 'she':'they', 'himself':'themself', \
                  'herself':'themself', 'him':'them', 'her':'them', \
                  'his':'them', 'hers':'theirs'}

chosen_prn=input('Do you want to replace pronouns with He/She (1) or with They (2)')

if chosen_prn=='1':
    replacement_dict=replacement_he_she
else:
    replacement_dict=replacement_they

"""# Step 3: PoS tagging and replacing

Here we use NLTK's PoS tagger to tag a word as a pronoun or not. Once it is tagged as a pronoun, we can replace it based on our preferred replacement dictionary. 
"""

for t in texts:
    t=t.split(' ') #splitting the sentence by words, returns a list
    t=[i for i in t if i] #removing empty strings, returns a list
    tagged_text=nltk.pos_tag(t) #tags a list-t with POS
    #print(tagged_text)
    sentence=[]
    for word, tag in tagged_text:#iterate through all the tags
        if tag=='PRP': #tag for pronoun
            if word in replacement_dict.keys():
                replacement=replacement_dict[word.lower()]
            else:
                replacement=word
            if replacement[0].isupper():
                replacement.title()
            sentence.append(replacement)
        else:
            sentence.append(word) #keep the word the same
    print(' '.join(sentence))

"""# Future Plans
- Use Co-Reference resolution to see whether a pronoun is refering to a person or a different person, or a thing and change genders based on that.
- Convert this into a chrome extension
"""

